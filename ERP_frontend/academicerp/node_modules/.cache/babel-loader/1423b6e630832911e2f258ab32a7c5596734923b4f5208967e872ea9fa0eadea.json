{"ast":null,"code":"import axios from \"axios\";\n\n// Create Axios instance\nconst axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || \"http://localhost:8080\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// // Add a request interceptor to include the token in headers\n// axiosInstance.interceptors.request.use((config) => {\n//     const token = localStorage.getItem(\"token\");\n//     if (token) {\n//         config.headers.Authorization = Bearer ${token};\n//     }\n//     return config;\n// });\n\naxiosInstance.interceptors.request.use(config => {\n  // Check if the endpoint requires authentication\n  if (config.requiresAuth) {\n    const token = localStorage.getItem(\"token\"); // Get the token from localStorage\n    if (token) {\n      config.headers[\"Authorization\"] = `Bearer ${token}`; // Add token to Authorization header\n    } else {\n      console.warn(\"No token found for authenticated request.\");\n    }\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","process","env","REACT_APP_API_BASE_URL","headers","interceptors","request","use","config","requiresAuth","token","localStorage","getItem","console","warn","error","Promise","reject"],"sources":["C:/Users/Ankit/Desktop/esd/AcademicERP-Project-main/ERP_frontend/academicerp/src/api/axiosInstance.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Create Axios instance\r\nconst axiosInstance = axios.create({\r\n    baseURL: process.env.REACT_APP_API_BASE_URL || \"http://localhost:8080\",\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n    },\r\n});\r\n\r\n// // Add a request interceptor to include the token in headers\r\n// axiosInstance.interceptors.request.use((config) => {\r\n//     const token = localStorage.getItem(\"token\");\r\n//     if (token) {\r\n//         config.headers.Authorization = Bearer ${token};\r\n//     }\r\n//     return config;\r\n// });\r\n\r\naxiosInstance.interceptors.request.use(\r\n    (config) => {\r\n      // Check if the endpoint requires authentication\r\n      if (config.requiresAuth) {\r\n        const token = localStorage.getItem(\"token\"); // Get the token from localStorage\r\n        if (token) {\r\n          config.headers[\"Authorization\"] = `Bearer ${token}`; // Add token to Authorization header\r\n        } else {\r\n          console.warn(\"No token found for authenticated request.\");\r\n        }\r\n      }\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\nexport default axiosInstance;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC/BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,uBAAuB;EACtEC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAN,aAAa,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACjCC,MAAM,IAAK;EACV;EACA,IAAIA,MAAM,CAACC,YAAY,EAAE;IACvB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAC7C,IAAIF,KAAK,EAAE;MACTF,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAI,UAASM,KAAM,EAAC,CAAC,CAAC;IACvD,CAAC,MAAM;MACLG,OAAO,CAACC,IAAI,CAAC,2CAA2C,CAAC;IAC3D;EACF;EACA,OAAON,MAAM;AACf,CAAC,EACAO,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAEH,eAAejB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}